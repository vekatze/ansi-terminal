import {
  core.binary {binary},
  core.int.show {show-int, show-uint},
  core.text {_Text},
  this.rule.ansi-kit {ansi-kit},
  this.rule.color {Color-256, Color-ANSI, Color-RGB},
  this.rule.color-ansi {
    Black,
    Blue,
    Cyan,
    Green,
    Magenta,
    Red,
    White,
    Yellow,
  },
  this.rule.color-intensity {Dull, Vivid},
  this.rule.color-layer {Background, Foreground},
  this.rule.command {Erase, Move-Cursor, Set-Style, command},
  this.rule.cursor-movement {Backward, Down, Down-Start, Forward, To, To-Column, Up, Up-Start},
  this.rule.space {Line, Screen},
  this.rule.span {From-Cursor, To-Cursor, Whole},
  this.rule.style {Bold, Color, Faint, Italic, Normal, Underline},
}

inline _to-binary(x: &text): &binary {
  tie _Text(content) = x in
  content
}

inline perform(k: &ansi-kit, c: command): unit {
  let _ = k in
  match c {
  | Set-Style(style) =>
    match style {
    | Normal =>
      print("\u{1b}[0m")
    | Bold =>
      print("\u{1b}[1m")
    | Faint =>
      print("\u{1b}[2m")
    | Italic =>
      print("\u{1b}[3m")
    | Underline =>
      print("\u{1b}[4m")
    | Color(color-layer, color) =>
      match color-layer {
      | Foreground =>
        match color {
        | Color-ANSI(color-intensity, color) =>
          match color-intensity {
          | Dull =>
            match color {
            | Black =>
              print("\u{1b}[30m")
            | Red =>
              print("\u{1b}[31m")
            | Green =>
              print("\u{1b}[32m")
            | Yellow =>
              print("\u{1b}[33m")
            | Blue =>
              print("\u{1b}[34m")
            | Magenta =>
              print("\u{1b}[35m")
            | Cyan =>
              print("\u{1b}[36m")
            | White =>
              print("\u{1b}[37m")
            }
          | Vivid =>
            match color {
            | Black =>
              print("\u{1b}[90m")
            | Red =>
              print("\u{1b}[91m")
            | Green =>
              print("\u{1b}[92m")
            | Yellow =>
              print("\u{1b}[93m")
            | Blue =>
              print("\u{1b}[94m")
            | Magenta =>
              print("\u{1b}[95m")
            | Cyan =>
              print("\u{1b}[96m")
            | White =>
              print("\u{1b}[97m")
            }
          }
        | Color-256(value) =>
          printf("\u{1b}[38;5;{}m]", [show-uint(zext-int8-int(value))])
        | Color-RGB(r, g, b) =>
          printf("\u{1b}[38;2;{};{};{}m]", [
            show-uint(zext-int8-int(r)),
            show-uint(zext-int8-int(g)),
            show-uint(zext-int8-int(b)),
          ])
        }
      | Background =>
        match color {
        | Color-ANSI(color-intensity, color) =>
          match color-intensity {
          | Dull =>
            match color {
            | Black =>
              print("\u{1b}[40m")
            | Red =>
              print("\u{1b}[41m")
            | Green =>
              print("\u{1b}[42m")
            | Yellow =>
              print("\u{1b}[43m")
            | Blue =>
              print("\u{1b}[44m")
            | Magenta =>
              print("\u{1b}[45m")
            | Cyan =>
              print("\u{1b}[46m")
            | White =>
              print("\u{1b}[47m")
            }
          | Vivid =>
            match color {
            | Black =>
              print("\u{1b}[100m")
            | Red =>
              print("\u{1b}[101m")
            | Green =>
              print("\u{1b}[102m")
            | Yellow =>
              print("\u{1b}[103m")
            | Blue =>
              print("\u{1b}[104m")
            | Magenta =>
              print("\u{1b}[105m")
            | Cyan =>
              print("\u{1b}[106m")
            | White =>
              print("\u{1b}[107m")
            }
          }
        | Color-256(value) =>
          printf("\u{1b}[48;5;{}m]", [show-uint(zext-int8-int(value))])
        | Color-RGB(r, g, b) =>
          printf("\u{1b}[48;2;{};{};{}m]", [
            show-uint(zext-int8-int(r)),
            show-uint(zext-int8-int(g)),
            show-uint(zext-int8-int(b)),
          ])
        }
      }
    }
  | Move-Cursor(movement) =>
    match movement {
    | Up(offset) =>
      printf("\u{1b}[{}A", [show-int(offset)])
    | Down(offset) =>
      printf("\u{1b}[{}B", [show-int(offset)])
    | Forward(offset) =>
      printf("\u{1b}[{}C", [show-int(offset)])
    | Backward(offset) =>
      printf("\u{1b}[{}D", [show-int(offset)])
    | Up-Start(offset) =>
      printf("\u{1b}[{}E", [show-int(offset)])
    | Down-Start(offset) =>
      printf("\u{1b}[{}F", [show-int(offset)])
    | To-Column(column) =>
      printf("\u{1b}[{}G", [show-int(column)])
    | To(x, y) =>
      printf("\u{1b}[{};{}H", [show-int(x), show-int(y)])
    }
  | Erase(space, span) =>
    match space {
    | Line =>
      match span {
      | From-Cursor =>
        print("\u{1b}[0K")
      | To-Cursor =>
        print("\u{1b}[1K")
      | Whole =>
        print("\u{1b}[2K")
      }
    | Screen =>
      match span {
      | From-Cursor =>
        print("\u{1b}[0J")
      | To-Cursor =>
        print("\u{1b}[1J")
      | Whole =>
        print("\u{1b}[2J")
      }
    }
  }
}
